type Query {
    """
    NOT YET IMPLEMENTED --
    Return the system configuration information, such as a list of AuthTypes
    """
    systemConfig: SystemConfig!

    users: [User!]!
    user(id: ID): User

    """
    Posts, aka Requests. With no parameters supplied, all posts visible to the authenticated user are returned. Filter
    parameters only remove from this default list and never include posts that are not visible to the authenticated
    user. For posts associated with a `User` or `Meeting`, use the `posts` field on `User` and `Meeting`.
    NOT YET IMPLEMENTED: `destination`, `origin`, `searchText`
    """
    posts(
        """
        NOT YET IMPLEMENTED --
        Only include posts that have a destination near the given location.
        """
        destination: LocationInput,

        """
        NOT YET IMPLEMENTED --
        Only include posts that have an origin near the given location.
        """
        origin: LocationInput

        """
        NOT YET IMPLEMENTED --
        Search by text in `title` or `description`
        """
        searchText: String
    ): [Post!]!

    post(id: ID): Post

    """
    DEPRECATED: `Query.searchRequests` will be replaced by the `searchText` parameter of `Query.posts`
    """
    searchRequests(
        text: String!
    ): [Post!]!  @deprecated(reason: "`Query.searchRequests` will be replaced by the `text` parameter of `Query.posts`")

    threads: [Thread!]!
    myThreads: [Thread!]!
    message(id: ID): Message!
    organizations: [Organization!]!
    organization(id: ID): Organization!

    """
    Meetings, aka Events. With no parameters supplied, only future meetings are returned.
    NOT YET IMPLEMENTED: `endAfter`, `endBefore`, `startafter`, `startBefore`
    """
    meetings(
        """
        NOT YET IMPLEMENTED --
        Only include meetings that have an `endDate` after a given day
        """
        endAfter: Date

        """
        NOT YET IMPLEMENTED --
        Only include meetings that have an `endDate` before a given day
        """
        endBefore: Date

        """
        NOT YET IMPLEMENTED --
        Only include meetings that have a `startDate` after a given day
        """
        startAfter: Date

        """
        NOT YET IMPLEMENTED --
        Only include meetings that have a `startDate` before a given day
        """
        startBefore: Date
    ): [Meeting!]!
    meeting(id: ID): Meeting

    """
    DEPRECATED: `Query.recentMeetings` will be replaced by the `endAfter` parameter of `Query.meetings`
    """
    recentMeetings: [Meeting!]! @deprecated(reason: "`Query.recentMeetings` will be replaced by `endAfter` parameter of `Query.meetings`")
    myWatches: [Watch!]!
}

type Mutation {
    createPost(input: CreatePostInput!): Post!
    updatePost(input: UpdatePostInput!): Post!
    updatePostStatus(input: UpdatePostStatusInput!): Post!

    """
    Update User profile information. If ID is not specified, the authenticated user is assumed.
    """
    updateUser(input: UpdateUserInput!): User!
    createMeeting(input: CreateMeetingInput!): Meeting!
    updateMeeting(input: UpdateMeetingInput!): Meeting!
    createMessage(input: CreateMessageInput!): Message!
    createOrganization(input: CreateOrganizationInput!): Organization!
    updateOrganization(input: UpdateOrganizationInput!): Organization!
    createOrganizationDomain(input: CreateOrganizationDomainInput!): [OrganizationDomain!]!
    updateOrganizationDomain(input: CreateOrganizationDomainInput!): [OrganizationDomain!]!
    removeOrganizationDomain(input: RemoveOrganizationDomainInput!): [OrganizationDomain!]!
    setThreadLastViewedAt(input: SetThreadLastViewedAtInput!): Thread!
    createWatch(input: CreateWatchInput!): Watch!
    updateWatch(input: UpdateWatchInput!): Watch!
    removeWatch(input: RemoveWatchInput!): [Watch!]!
    createOrganizationTrust(input: CreateOrganizationTrustInput!): Organization!
    removeOrganizationTrust(input: RemoveOrganizationTrustInput!): Organization!

    """
    NOT YET IMPLEMENTED --
    Bulk create `MeetingInvitation`s
    """
    createMeetingInvitations(input: CreateMeetingInvitationsInput!): [MeetingInvitation!]!

    """
    NOT YET IMPLEMENTED --
    Remove a `MeetingInvitation` and return the remaining invitations for the `Meeting`
    """
    removeMeetingInvitation(input: RemoveMeetingInvitationInput!): [MeetingInvitation!]!

    """
    NOT YET IMPLEMENTED --
    Validate a `MeetingInvitation` and create a new `MeetingParticipant`. If the `MeetingParticipant.User` contains
    one or more `Organizations`, the user should be redirected to the standard login page. Otherwise, login should
    proceed through one of the configured `AuthType`s described by the `systemConfig` query.
    """
    createMeetingParticipant(input: CreateMeetingParticipantInput!): MeetingParticipant!

    """
    NOT YET IMPLEMENTED --
    Remove a `MeetingParticipant` and return the remaining participants for the `Meeting`
    """
    removeMeetingParticipant(input: RemoveMeetingParticipantInput!): [MeetingParticipant!]!
}

"Date and Time in ISO-8601 format (e.g. 2020-02-11T18:08:56Z)"
scalar Time

"Date in ISO-8601 format (e.g. 2020-02-11)"
scalar Date

enum UserAdminRole {
    SUPERADMIN
    SALESADMIN
    ADMIN
    USER
}

enum PostRole {
    CREATEDBY
    RECEIVING
    PROVIDING
}

enum PostStatus {
    OPEN
    COMMITTED
    ACCEPTED
    DELIVERED
    RECEIVED
    COMPLETED
    REMOVED
}

enum PostSize {
    TINY
    SMALL
    MEDIUM
    LARGE
    XLARGE
}

"Visibility for Posts, ALL organizations, TRUSTED organizations, or SAME organization only"
enum PostVisibility {
    "Visible to all users from all organizations in the system"
    ALL
    "Visible to users from all organizations trusted by the Post creator's organization"
    TRUSTED
    "Visible only to users from the same organization as the Post creator"
    SAME
}

"Visibility for Meetings (Events), determines who can see a `Meeting`."
enum MeetingVisibility {
    "Visible to invitees and all app users"
    ALL
    "Visible to invitees and members of the `Meeting` organization and affiliated organizations"
    TRUSTED
    "Visible to invitees and members of the `Meeting` organization"
    ORGANIZATION
    "Visible only to invitees"
    PRIVATE
}

type User {
    id: ID!
    email: String!
    nickname: String!
    createdAt: Time!
    updatedAt: Time!
    adminRole: UserAdminRole
    organizations: [Organization!]!
    posts(role: PostRole!): [Post!]!
    avatarURL: String
    preferences: UserPreferences
    location: Location
    unreadMessageCount: Int!
}

type UserPreferences {
    language: String
    timeZone: String
    weightUnit: String
}

"Input object for `updateUser`"
input UpdateUserInput {
    id: ID
    nickname: String
    "File ID of avatar photo. If omitted or `null`, the photo is removed from the profile."
    photoID: String
    """
    Specify the user's "home" location. If omitted or `null`, the location is removed from the profile.
    """
    location: LocationInput
    preferences: UpdateUserPreferencesInput
}

enum PreferredLanguage {
    EN
    FR
    SP
    KO
    PT
}

enum PreferredWeightUnit {
    POUNDS
    KILOGRAMS
}


input UpdateUserPreferencesInput {
    language: PreferredLanguage
    timeZone: String
    weightUnit: PreferredWeightUnit
}

"User fields that can safely be visible to any user in the system"
type PublicProfile {
    id: ID!
    nickname: String!
    avatarURL: String
}

enum PostType {
    REQUEST
    OFFER
}

type Post {
    id: ID!
    type: PostType!
    createdBy: PublicProfile!
    receiver: PublicProfile
    provider: PublicProfile
    organization: Organization
    title: String!
    description: String
    destination: Location!
    neededBefore: Date
    origin: Location
    size: PostSize!
    status: PostStatus!
    threads: [Thread!]!
    createdAt: Time!
    updatedAt: Time!
    url: String
    kilograms: Float
    photo: File
    files: [File!]!
    meeting: Meeting
    isEditable: Boolean!
    visibility: PostVisibility!
}

type Meeting {
    id: ID!
    name: String!
    description: String
    moreInfoURL: String
    startDate: Date!
    endDate: Date!
    createdAt: Time!
    updatedAt: Time!
    createdBy: PublicProfile!
    imageFile: File
    location: Location!

    "Posts (Requests) associated with the meeting"
    posts: [Post!]!

    """
    NOT YET IMPLEMENTED --
    Who can see this meeting
    """
    visibility: MeetingVisibility!

    """
    NOT YET IMPLEMENTED --
    Invitations to the `Meeting` that have been sent to the invitee for their confirmation to join the `Meeting`
    """
    invitations: [MeetingInvitation!]!

    """
    NOT YET IMPLEMENTED --
    Participants of a `Meeting` are able to see all posts associated with the `Meeting`
    """
    participants: [MeetingParticipant!]!
}

type Organization {
    id: ID!
    name: String!
    url: String
    createdAt: Time!
    updatedAt: Time!
    domains: [OrganizationDomain!]!
    logoURL: String
    trustedOrganizations: [Organization!]!
}

input CreateOrganizationInput {
    name: String!
    url: String
    authType: String!
    authConfig: String!
    logoFileID: ID
}

input UpdateOrganizationInput {
    id: ID!
    name: String!
    url: String
    authType: String!
    authConfig: String!
    logoFileID: ID
}

type OrganizationDomain {
    domain: String!
    organizationID: ID!
    authType: String!
    authConfig: String!
}

input CreateOrganizationDomainInput {
    domain: String!
    organizationID: ID!
    authType: String
    authConfig: String
}

input RemoveOrganizationDomainInput {
    domain: String!
    organizationID: ID!
}

type Thread {
    id: ID!
    participants: [PublicProfile!]!
    messages: [Message!]!
    postID: String!
    post: Post!
    lastViewedAt: Time!
    createdAt: Time!
    updatedAt: Time!
    unreadMessageCount: Int!
}

type Message {
    id: ID!
    sender: PublicProfile!
    content: String!
    thread: Thread!
    createdAt: Time!
    updatedAt: Time!
}

input CreatePostInput {
    orgID: String!
    type: PostType!
    title: String!
    description: String
    destination: LocationInput!
    neededBefore: Date
    origin: LocationInput
    size: PostSize!
    url: String
    kilograms: Float
    photoID: ID
    meetingID: ID
    visibility: PostVisibility
}

input UpdatePostInput {
    id: ID!
    title: String
    description: String
    destination: LocationInput
    neededBefore: Date
    origin: LocationInput
    size: PostSize
    url: String
    kilograms: Float
    photoID: ID
    visibility: PostVisibility
}

input CreateMeetingInput {
    name: String!
    description: String
    startDate: Date!
    endDate: Date!
    moreInfoURL: String
    imageFileID: ID
    location: LocationInput!
    
    """
    NOT YET IMPLEMENTED --
    Who can see this meeting
    """
    visibility: MeetingVisibility!
}

input UpdateMeetingInput {
    id: ID!
    name: String!
    description: String
    startDate: Date!
    endDate: Date!
    moreInfoURL: String
    imageFileID: ID
    location: LocationInput!

    """
    NOT YET IMPLEMENTED --
    Who can see this meeting
    """
    visibility: MeetingVisibility!
}

input CreateMessageInput {
    content: String!
    postID: String!
    threadID: String
}

type File {
    id: ID!
    url: String!
    urlExpiration: Time!
    name: String!
    size: Int!
    contentType: String!
}

input SetThreadLastViewedAtInput {
    threadID: ID!
    time: Time!
}

"Describes a Geographic location"
type Location {
    description: String!
    # Country, ISO 3166-1 Alpha-2 code
    country: String!
    latitude: Float
    longitude: Float
}

"Specify a Geographic location"
input LocationInput {
    description: String!
    # Country, ISO 3166-1 Alpha-2 code
    country: String!
    latitude: Float
    longitude: Float
}

input UpdatePostStatusInput {
    id: ID!
    status: PostStatus!
}

type Watch {
    id: ID!
    owner: PublicProfile!
    location: Location
}

input CreateWatchInput {
    location: LocationInput
}

input UpdateWatchInput {
    id: ID!
    location: LocationInput
}

input RemoveWatchInput {
    id: ID!
}

input CreateOrganizationTrustInput {
    primaryID: ID!
    secondaryID: ID!
}

input RemoveOrganizationTrustInput {
    primaryID: ID!
    secondaryID: ID!
}

"""
Invitation to a `Meeting`. An invitation must be confirmed by the invitee before they may be added to a `Meeting`.
"""
type MeetingInvitation {
    "ID of the `Meeting`"
    meetingID: ID!
    "ID of the `User` making the invitation"
    userID: ID!
    "Email address of the invitee"
    email: String!
    "Gravatar image URL. Always a valid URL, but depending on the email address, it may reference a generic avatar."
    avatarURL: String!
}

"Input object for `createMeetingInvitations`"
input CreateMeetingInvitationsInput {
    "ID of the `Meeting`"
    meetingID: ID!
    "ID of the `User` making the invitations"
    userID: ID!
    "Email addresses of the invitees"
    emails: [String!]!
}

"Input object for `removeMeetingInvitation`"
input RemoveMeetingInvitationInput {
    "ID of the `Meeting`"
    meetingID: ID!
    "Email addresse of the invitee to remove"
    email: String!
}

"""
Confirmed participant of a `Meeting`. An invited person will not appear as a `MeetingParticipant` until they have
confirmed a `MeetingInvitation`.
"""
type MeetingParticipant {
    meeting: Meeting!
    "`User` information for the `Meeting` participant"
    user: User!
    "true if `User` is a meeting Organizer"
    isOrganizer: Boolean
    "ID of the `MeetingInvitation`, valid if the participant was invited. `null` indicates the `User` self-joined"
    invitationID: ID
}

"Input object for `createMeetingParticipant`"
input CreateMeetingParticipantInput {
    "ID of the `Meeting`"
    meetingID: ID!
    "Confirmation code from the `MeetingInvitation`. If not provided, the `Meeting` must be a non-private meeting."
    confirmationCode: String
    "Add as a `Meeting` Organizer. Authenticated `User` must be authorized [definition TBD] to do this. "
    isOrganizer: Boolean
}

"Input object for `removeMeetingParticipant`"
input RemoveMeetingParticipantInput {
    "ID of the `Meeting`"
    meetingID: ID!
    "`User` ID of the `Meeting` participant to remove"
    userID: ID!
}

"""
NOT YET IMPLEMENTED --
System configuration information
"""
type SystemConfig {
    "Authentication type for login outside the context of an `Organization`, such as for `Meeting` participants"
    authTypes: [AuthType!]!
}

"""
NOT YET IMPLEMENTED --
Authentication type for login outside the context of an `Organization`, such as for `Meeting` participants
"""
type AuthType {
    "Display name of the auth type. e.g. 'Facebook'"
    name: String!
    "Fully-qualified login URL for the auth type"
    loginURL: String!
    "Logo for user selection of login method"
    logo: File
}
