type Query {
    users: [User!]!
    user(id: ID): User
    posts: [Post!]!
    post(id: ID): Post
    searchRequests(text: String!): [Post!]!
    threads: [Thread!]!
    myThreads: [Thread!]!
    message(id: ID): Message!
    organizations: [Organization!]!
    organization(id: ID): Organization!
    meetings: [Meeting!]!
    meeting(id: ID): Meeting
    recentMeetings: [Meeting!]!
    myWatches: [Watch!]!
}

type Mutation {
    createPost(input: CreatePostInput!): Post!
    updatePost(input: UpdatePostInput!): Post!
    updatePostStatus(input: UpdatePostStatusInput!): Post!
    updateUser(input: UpdateUserInput!): User!
    createMeeting(input: CreateMeetingInput!): Meeting!
    updateMeeting(input: UpdateMeetingInput!): Meeting!
    createMessage(input: CreateMessageInput!): Message!
    createOrganization(input: CreateOrganizationInput!): Organization!
    updateOrganization(input: UpdateOrganizationInput!): Organization!
    createOrganizationDomain(input: CreateOrganizationDomainInput!): [OrganizationDomain!]!
    updateOrganizationDomain(input: CreateOrganizationDomainInput!): [OrganizationDomain!]!
    removeOrganizationDomain(input: RemoveOrganizationDomainInput!): [OrganizationDomain!]!
    setThreadLastViewedAt(input: SetThreadLastViewedAtInput!): Thread!
    createWatch(input: CreateWatchInput!): Watch!
    updateWatch(input: UpdateWatchInput!): Watch!
    removeWatch(input: RemoveWatchInput!): [Watch!]!
    createOrganizationTrust(input: CreateOrganizationTrustInput!): Organization!
    removeOrganizationTrust(input: RemoveOrganizationTrustInput!): Organization!
}

# Date and Time in RFC3339 format
scalar Time

enum UserAdminRole {
    SUPERADMIN
    SALESADMIN
    ADMIN
    USER
}

enum PostRole {
    CREATEDBY
    RECEIVING
    PROVIDING
}

enum PostStatus {
    OPEN
    COMMITTED
    ACCEPTED
    DELIVERED
    RECEIVED
    COMPLETED
    REMOVED
}

enum PostSize {
    TINY
    SMALL
    MEDIUM
    LARGE
    XLARGE
}

"Visibility for Posts, ALL organizations, TRUSTED organizations, or SAME organization only"
enum PostVisibility {
    "Visible to all users from all organizations in the system"
    ALL
    "Visible to users from all organizations trusted by the Post creator's organization"
    TRUSTED
    "Visible only to users from the same organization as the Post creator"
    SAME
}

type User {
    id: ID!
    email: String!
    nickname: String!
    createdAt: Time!
    updatedAt: Time!
    adminRole: UserAdminRole
    organizations: [Organization!]!
    posts(role: PostRole!): [Post!]!
    avatarURL: String
    preferences: UserPreferences
    location: Location
    unreadMessageCount: Int!
}

type UserPreferences {
    language: String
    timeZone: String
    weightUnit: String
}

"Update User profile information. If ID is not specified, the authenticated user is assumed."
input UpdateUserInput {
    id: ID
    nickname: String
    "File ID of avatar photo. If omitted or `null`, the photo is removed from the profile."
    photoID: String
    """
    Specify the user's "home" location. If omitted or `null`, the location is removed from the profile.
    """
    location: LocationInput
    preferences: UpdateUserPreferencesInput
}

enum PreferredLanguage {
    EN
    FR
    SP
    KO
    PT
}

enum PreferredWeightUnit {
    POUNDS
    KILOGRAMS
}


input UpdateUserPreferencesInput {
    language: PreferredLanguage
    timeZone: String
    weightUnit: PreferredWeightUnit
}

"User fields that can safely be visible to any user in the system"
type PublicProfile {
    id: ID!
    nickname: String!
    avatarURL: String
}

enum PostType {
    REQUEST
    OFFER
}

type Post {
    id: ID!
    type: PostType!
    createdBy: PublicProfile!
    receiver: PublicProfile
    provider: PublicProfile
    organization: Organization
    title: String!
    description: String
    destination: Location!
    neededBefore: String
    origin: Location
    size: PostSize!
    status: PostStatus!
    threads: [Thread!]!
    createdAt: Time!
    updatedAt: Time!
    url: String
    kilograms: Float
    photo: File
    files: [File!]!
    meeting: Meeting
    isEditable: Boolean!
    visibility: PostVisibility!
}

type Meeting {
    id: ID!
    name: String!
    description: String
    moreInfoURL: String
    startDate: String!
    endDate: String!
    createdAt: Time!
    updatedAt: Time!
    createdBy: PublicProfile!
    imageFile: File
    location: Location!
}

type Organization {
    id: ID!
    name: String!
    url: String
    createdAt: Time!
    updatedAt: Time!
    domains: [OrganizationDomain!]!
    logoURL: String
    trustedOrganizations: [Organization!]!
}

input CreateOrganizationInput {
    name: String!
    url: String
    authType: String!
    authConfig: String!
    logoFileID: ID
}

input UpdateOrganizationInput {
    id: ID!
    name: String!
    url: String
    authType: String!
    authConfig: String!
    logoFileID: ID
}

type OrganizationDomain {
    domain: String!
    organizationID: ID!
    authType: String!
    authConfig: String!
}

input CreateOrganizationDomainInput {
    domain: String!
    organizationID: ID!
    authType: String
    authConfig: String
}

input RemoveOrganizationDomainInput {
    domain: String!
    organizationID: ID!
}

type Thread {
    id: ID!
    participants: [PublicProfile!]!
    messages: [Message!]!
    postID: String!
    post: Post!
    lastViewedAt: Time!
    createdAt: Time!
    updatedAt: Time!
    unreadMessageCount: Int!
}

type Message {
    id: ID!
    sender: PublicProfile!
    content: String!
    thread: Thread!
    createdAt: Time!
    updatedAt: Time!
}

input CreatePostInput {
    orgID: String!
    type: PostType!
    title: String!
    description: String
    destination: LocationInput!
    neededBefore: String
    origin: LocationInput
    size: PostSize!
    url: String
    kilograms: Float
    photoID: ID
    meetingID: ID
    visibility: PostVisibility
}

input UpdatePostInput {
    id: ID!
    title: String
    description: String
    destination: LocationInput
    neededBefore: String
    origin: LocationInput
    size: PostSize
    url: String
    kilograms: Float
    photoID: ID
    visibility: PostVisibility
}

input CreateMeetingInput {
    name: String!
    description: String
    startDate: String!
    endDate: String!
    moreInfoURL: String
    imageFileID: ID
    location: LocationInput!
}

input UpdateMeetingInput {
    id: ID!
    name: String!
    description: String
    startDate: String!
    endDate: String!
    moreInfoURL: String
    imageFileID: ID
    location: LocationInput!
}

input CreateMessageInput {
    content: String!
    postID: String!
    threadID: String
}

type File {
    id: ID!
    url: String!
    urlExpiration: Time!
    name: String!
    size: Int!
    contentType: String!
}

input SetThreadLastViewedAtInput {
    threadID: ID!
    time: Time!
}

"Describes a Geographic location"
type Location {
    description: String!
    # Country, ISO 3166-1 Alpha-2 code
    country: String!
    latitude: Float
    longitude: Float
}

"Specify a Geographic location"
input LocationInput {
    description: String!
    # Country, ISO 3166-1 Alpha-2 code
    country: String!
    latitude: Float
    longitude: Float
}

input UpdatePostStatusInput {
    id: ID!
    status: PostStatus!
}

type Watch {
    id: ID!
    owner: PublicProfile!
    location: Location
}

input CreateWatchInput {
    location: LocationInput
}

input UpdateWatchInput {
    id: ID!
    location: LocationInput
}

input RemoveWatchInput {
    id: ID!
}

input CreateOrganizationTrustInput {
    primaryID: ID!
    secondaryID: ID!
}

input RemoveOrganizationTrustInput {
    primaryID: ID!
    secondaryID: ID!
}
