type Query {
    users: [User!]!
    user(id: ID): User
    posts: [Post!]!
    post(id: ID): Post
    searchRequests(text: String!): [Post!]!
    threads: [Thread!]!
    myThreads: [Thread!]!
    message(id: ID): Message!
    organizations: [Organization!]!
    organization(id: ID): Organization!
    meetings: [Meeting!]!
    meeting(id: ID): Meeting
    recentMeetings: [Meeting!]!
}

type Mutation {
    createPost(input: CreatePostInput!): Post!
    updatePost(input: UpdatePostInput!): Post!
    updatePostStatus(input: UpdatePostStatusInput!): Post!
    updateUser(input: UpdateUserInput!): User!
    createMeeting(input: CreateMeetingInput!): Meeting!
    updateMeeting(input: UpdateMeetingInput!): Meeting!
    createMessage(input: CreateMessageInput!): Message!
    createOrganization(input: CreateOrganizationInput!): Organization!
    updateOrganization(input: UpdateOrganizationInput!): Organization!
    createOrganizationDomain(input: CreateOrganizationDomainInput!): [OrganizationDomain!]!
    removeOrganizationDomain(input: RemoveOrganizationDomainInput!): [OrganizationDomain!]!
    setThreadLastViewedAt(input: SetThreadLastViewedAtInput!): Thread!
}

# Date and Time in RFC3339 format
scalar Time

enum UserAdminRole {
    SUPERADMIN
    SALESADMIN
    ADMIN
    USER
}

enum PostRole {
    CREATEDBY
    RECEIVING
    PROVIDING
}

enum PostStatus {
    OPEN
    COMMITTED
    ACCEPTED
    DELIVERED
    RECEIVED
    COMPLETED
    REMOVED
}

enum PostSize {
    TINY
    SMALL
    MEDIUM
    LARGE
    XLARGE
}

type User {
    id: ID!
    email: String!
    nickname: String!
    createdAt: Time!
    updatedAt: Time!
    adminRole: UserAdminRole
    organizations: [Organization!]!
    posts(role: PostRole!): [Post!]!
    avatarURL: String
    preferences: UserPreferences
    location: Location
    unreadMessageCount: Int!
}

type UserPreferences {
    language: String
    timeZone: String
    weightUnit: String
}

input UpdateUserInput {
    id: ID
    nickname: String
    photoID: String
    location: LocationInput
    preferences: UpdateUserPreferencesInput
}

enum PreferredLanguage {
    EN
    FR
    SP
    KO
    PT
}

enum PreferredWeightUnit {
    POUNDS
    KILOGRAMS
}


input UpdateUserPreferencesInput {
    language: PreferredLanguage
    timeZone: String
    weightUnit: PreferredWeightUnit
}

"User fields that can safely be visible to any user in the system"
type PublicProfile {
    id: ID!
    nickname: String!
    avatarURL: String
}

enum PostType {
    REQUEST
    OFFER
}

type Post {
    id: ID!
    type: PostType!
    createdBy: PublicProfile!
    receiver: PublicProfile
    provider: PublicProfile
    organization: Organization
    title: String!
    description: String
    destination: Location!
    origin: Location
    size: PostSize!
    status: String!
    threads: [Thread!]!
    createdAt: Time!
    updatedAt: Time!
    url: String
    kilograms: Float
    photo: File
    files: [File!]!
    meeting: Meeting
    isEditable: Boolean!
}

type Meeting {
    id: ID!
    name: String!
    description: String
    moreInfoURL: String
    startDate: String!
    endDate: String!
    createdAt: Time!
    updatedAt: Time!
    createdBy: PublicProfile!
    imageFile: File
    location: Location!
}

type Organization {
    id: ID!
    name: String!
    url: String
    createdAt: Time!
    updatedAt: Time!
    domains: [OrganizationDomain!]!
}

input CreateOrganizationInput {
    name: String!
    url: String
    authType: String!
    authConfig: String!
}

input UpdateOrganizationInput {
    id: ID!
    name: String!
    url: String
    authType: String!
    authConfig: String!
}

type OrganizationDomain {
    domain: String!
    organizationID: ID!
}

input CreateOrganizationDomainInput {
    domain: String!
    organizationID: ID!
}

input RemoveOrganizationDomainInput {
    domain: String!
    organizationID: ID!
}

type Thread {
    id: ID!
    participants: [PublicProfile!]!
    messages: [Message!]!
    postID: String!
    post: Post!
    lastViewedAt: Time!
    createdAt: Time!
    updatedAt: Time!
    unreadMessageCount: Int!
}

type Message {
    id: ID!
    sender: PublicProfile!
    content: String!
    thread: Thread!
    createdAt: Time!
    updatedAt: Time!
}

input CreatePostInput {
    orgID: String!
    type: PostType!
    title: String!
    description: String
    destination: LocationInput!
    origin: LocationInput
    size: PostSize!
    url: String
    kilograms: Float
    photoID: ID
    meetingID: ID
}

input UpdatePostInput {
    id: ID!
    title: String
    description: String
    destination: LocationInput
    origin: LocationInput
    size: PostSize
    url: String
    kilograms: Float
    photoID: ID
}

input CreateMeetingInput {
    name: String!
    description: String
    startDate: String!
    endDate: String!
    moreInfoURL: String
    imageFileID: ID
    location: LocationInput!
}

input UpdateMeetingInput {
    id: ID!
    name: String!
    description: String
    startDate: String!
    endDate: String!
    moreInfoURL: String
    imageFileID: ID
    location: LocationInput!
}

input CreateMessageInput {
    content: String!
    postID: String!
    threadID: String
}

type File {
    id: ID!
    url: String!
    urlExpiration: Time!
    name: String!
    size: Int!
    contentType: String!
}

input SetThreadLastViewedAtInput {
    threadID: ID!
    time: Time!
}

type Location {
    description: String!
    # Country, ISO 3166-1 Alpha-2 code
    country: String!
    latitude: Float
    longitude: Float
}

input LocationInput {
    description: String!
    # Country, ISO 3166-1 Alpha-2 code
    country: String!
    latitude: Float
    longitude: Float
}

input UpdatePostStatusInput {
    id: ID!
    status: PostStatus!
}
