type Query {
    users: [User]!
    user(id: ID): User
    posts: [Post]!
    post(id: ID): Post
    threads: [Thread]!
    myThreads: [Thread]!
    message(id: ID): Message!
}

type Mutation {
    createPost(input: NewPost!): Post!
    updatePost(input: UpdatedPost!): Post!
    updateUser(input: UpdatedUser!): User!
    createMessage(input: NewMessage!): Message!
    createOrganization(input: NewOrganization!): Organization!
    updateOrganization(input: UpdatedOrganization!): Organization!
    createOrganizationDomain(input: NewOrganizationDomain!): [OrganizationDomain!]!
    removeOrganizationDomain(input: NewOrganizationDomain!): [OrganizationDomain!]!
}

# Date and Time in RFC3339 format
scalar Time

enum Role {
    ADMIN
    USER
}

enum PostRole {
    CREATEDBY
    RECEIVING
    PROVIDING
}

enum PostStatus {
    OPEN
    COMMITTED
    ACCEPTED
    RECEIVED
    COMPLETED
    REMOVED
}

type User {
    id: ID!
    email: String!
    firstName: String!
    lastName: String!
    nickname: String!
    createdAt: Time
    updatedAt: Time
    adminRole: Role
    organizations: [Organization!]!
    posts(role: PostRole!): [Post!]!
    photoURL: String!
}

input UpdatedUser {
    id: ID!
    photoURL: String
    photoID: String
}

enum PostType {
    REQUEST
    OFFER
}

type Post {
    id: ID!
    type: PostType!
    createdBy: User!
    receiver: User
    provider: User
    organization: Organization
    title: String!
    description: String
    destination: String
    origin: String
    size: String!
    neededAfter: String
    neededBefore: String
    category: String!
    status: String!
    threads: [Thread]!
    createdAt: Time
    updatedAt: Time
    myThreadID: String
    url: String
    cost: String
    photo: File
    files: [File!]!
}

type Organization {
    id: ID!
    name: String!
    url: String
    createdAt: Time
    updatedAt: Time
    domains: [OrganizationDomain!]!
}

input NewOrganization {
    name: String!
    url: String
    authType: String!
    authConfig: String!
}

input UpdatedOrganization {
    id: ID!
    name: String!
    url: String
    authType: String!
    authConfig: String!
}

type OrganizationDomain {
    domain: String!
    organizationID: ID!
}

input NewOrganizationDomain {
    domain: String!
    organizationID: ID!
}

type Thread {
    id: ID!
    participants: [User!]!
    messages: [Message!]!
    postID: String!
    post: Post!
    createdAt: Time
    updatedAt: Time
}

type Message {
    id: ID!
    sender: User!
    content: String!
    thread: Thread!
    createdAt: Time
    updatedAt: Time
}

input NewPost {
    orgID: String!
    type: PostType!
    title: String!
    description: String
    destination: String
    origin: String
    size: String!
    neededAfter: String
    neededBefore: String
    category: String
    url: String
    cost: String
}

input NewMessage {
    content: String!
    postID: String!
    threadID: String
}

input UpdatedPost {
    id: ID!
    status: PostStatus
    title: String
    description: String
    destination: String
    origin: String
    size: String
    neededAfter: String
    neededBefore: String
    category: String
    url: String
    cost: String
    photoID: ID
}

type File {
    id: ID!
    url: String!
    urlExpiration: Time!
    name: String!
    size: Int!
    contentType: String!
}
