// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/silinternational/wecarry-api/models"
)

// Input object for `createMeetingInvitations`
type CreateMeetingInvitationsInput struct {
	// ID of the `Meeting`
	MeetingID string `json:"meetingID"`
	// ID of the `User` making the invitations
	UserID string `json:"userID"`
	// Email addresses of the invitees
	Emails []string `json:"emails"`
}

// Input object for `createMeetingParticipant`
type CreateMeetingParticipantInput struct {
	// ID of the `Meeting`
	MeetingID string `json:"meetingID"`
	// Confirmation code from the `MeetingInvitation`. If not provided, the `Meeting` must not be `INVITE_ONLY`.
	ConfirmationCode *string `json:"confirmationCode"`
	// Add as a `Meeting` Organizer. Authenticated `User` must be authorized [definition TBD] to do this.
	IsOrganizer *bool `json:"isOrganizer"`
}

type CreateMessageInput struct {
	Content  string  `json:"content"`
	PostID   string  `json:"postID"`
	ThreadID *string `json:"threadID"`
}

type CreateOrganizationDomainInput struct {
	Domain         string  `json:"domain"`
	OrganizationID string  `json:"organizationID"`
	AuthType       *string `json:"authType"`
	AuthConfig     *string `json:"authConfig"`
}

type CreateOrganizationInput struct {
	Name       string  `json:"name"`
	URL        *string `json:"url"`
	AuthType   string  `json:"authType"`
	AuthConfig string  `json:"authConfig"`
	LogoFileID *string `json:"logoFileID"`
}

type CreateOrganizationTrustInput struct {
	PrimaryID   string `json:"primaryID"`
	SecondaryID string `json:"secondaryID"`
}

// Specify a Geographic location
type LocationInput struct {
	Description string   `json:"description"`
	Country     string   `json:"country"`
	Latitude    *float64 `json:"latitude"`
	Longitude   *float64 `json:"longitude"`
}

// Invitation to a `Meeting`. An invitation must be confirmed by the invitee before they may be added to a `Meeting`.
type MeetingInvitation struct {
	// ID of the `Meeting`
	MeetingID string `json:"meetingID"`
	// ID of the `User` making the invitation
	UserID string `json:"userID"`
	// Email address of the invitee
	Email string `json:"email"`
	// Gravatar image URL. Always a valid URL, but depending on the email address, it may reference a generic avatar.
	AvatarURL string `json:"avatarURL"`
}

// Confirmed participant of a `Meeting`. An invited person will not appear as a `MeetingParticipant` until they have
// confirmed a `MeetingInvitation`.
type MeetingParticipant struct {
	Meeting *models.Meeting `json:"meeting"`
	// `User` information for the `Meeting` participant
	User *models.User `json:"user"`
	// true if `User` is a meeting Organizer
	IsOrganizer *bool `json:"isOrganizer"`
	// ID of the `MeetingInvitation`, valid if the participant was invited. `null` indicates the `User` self-joined
	InvitationID *string `json:"invitationID"`
}

// User fields that can safely be visible to any user in the system
type PublicProfile struct {
	ID        string  `json:"id"`
	Nickname  string  `json:"nickname"`
	AvatarURL *string `json:"avatarURL"`
}

// Input object for `removeMeetingInvitation`
type RemoveMeetingInvitationInput struct {
	// ID of the `Meeting`
	MeetingID string `json:"meetingID"`
	// Email addresse of the invitee to remove
	Email string `json:"email"`
}

// Input object for `removeMeetingParticipant`
type RemoveMeetingParticipantInput struct {
	// ID of the `Meeting`
	MeetingID string `json:"meetingID"`
	// `User` ID of the `Meeting` participant to remove
	UserID string `json:"userID"`
}

type RemoveOrganizationDomainInput struct {
	Domain         string `json:"domain"`
	OrganizationID string `json:"organizationID"`
}

type RemoveOrganizationTrustInput struct {
	PrimaryID   string `json:"primaryID"`
	SecondaryID string `json:"secondaryID"`
}

type RemoveWatchInput struct {
	ID string `json:"id"`
}

type SetThreadLastViewedAtInput struct {
	ThreadID string    `json:"threadID"`
	Time     time.Time `json:"time"`
}

type UpdateOrganizationInput struct {
	ID         string  `json:"id"`
	Name       string  `json:"name"`
	URL        *string `json:"url"`
	AuthType   string  `json:"authType"`
	AuthConfig string  `json:"authConfig"`
	LogoFileID *string `json:"logoFileID"`
}

type UpdatePostStatusInput struct {
	ID             string            `json:"id"`
	Status         models.PostStatus `json:"status"`
	ProviderUserID *string           `json:"providerUserID"`
}

// Input object for `updateUser`
type UpdateUserInput struct {
	ID       *string `json:"id"`
	Nickname *string `json:"nickname"`
	// File ID of avatar photo. If omitted or `null`, the photo is removed from the profile.
	PhotoID *string `json:"photoID"`
	// Specify the user's "home" location. If omitted or `null`, the location is removed from the profile.
	Location    *LocationInput              `json:"location"`
	Preferences *UpdateUserPreferencesInput `json:"preferences"`
}

type UpdateUserPreferencesInput struct {
	Language   *PreferredLanguage   `json:"language"`
	TimeZone   *string              `json:"timeZone"`
	WeightUnit *PreferredWeightUnit `json:"weightUnit"`
}

// Visibility for Meetings (Events), determines who can see a `Meeting`.
type MeetingVisibility string

const (
	// Visible to invitees and all app users
	MeetingVisibilityAll MeetingVisibility = "ALL"
	// Visible to invitees and members of the `Meeting` organization and affiliated organizations
	MeetingVisibilityTrusted MeetingVisibility = "TRUSTED"
	// Visible to invitees and members of the `Meeting` organization
	MeetingVisibilityOrganization MeetingVisibility = "ORGANIZATION"
	// Visible only to invitees
	MeetingVisibilityInviteOnly MeetingVisibility = "INVITE_ONLY"
)

var AllMeetingVisibility = []MeetingVisibility{
	MeetingVisibilityAll,
	MeetingVisibilityTrusted,
	MeetingVisibilityOrganization,
	MeetingVisibilityInviteOnly,
}

func (e MeetingVisibility) IsValid() bool {
	switch e {
	case MeetingVisibilityAll, MeetingVisibilityTrusted, MeetingVisibilityOrganization, MeetingVisibilityInviteOnly:
		return true
	}
	return false
}

func (e MeetingVisibility) String() string {
	return string(e)
}

func (e *MeetingVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MeetingVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MeetingVisibility", str)
	}
	return nil
}

func (e MeetingVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostRole string

const (
	PostRoleCreatedby PostRole = "CREATEDBY"
	PostRoleReceiving PostRole = "RECEIVING"
	PostRoleProviding PostRole = "PROVIDING"
)

var AllPostRole = []PostRole{
	PostRoleCreatedby,
	PostRoleReceiving,
	PostRoleProviding,
}

func (e PostRole) IsValid() bool {
	switch e {
	case PostRoleCreatedby, PostRoleReceiving, PostRoleProviding:
		return true
	}
	return false
}

func (e PostRole) String() string {
	return string(e)
}

func (e *PostRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostRole", str)
	}
	return nil
}

func (e PostRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PreferredLanguage string

const (
	PreferredLanguageEn PreferredLanguage = "EN"
	PreferredLanguageFr PreferredLanguage = "FR"
	PreferredLanguageSp PreferredLanguage = "SP"
	PreferredLanguageKo PreferredLanguage = "KO"
	PreferredLanguagePt PreferredLanguage = "PT"
)

var AllPreferredLanguage = []PreferredLanguage{
	PreferredLanguageEn,
	PreferredLanguageFr,
	PreferredLanguageSp,
	PreferredLanguageKo,
	PreferredLanguagePt,
}

func (e PreferredLanguage) IsValid() bool {
	switch e {
	case PreferredLanguageEn, PreferredLanguageFr, PreferredLanguageSp, PreferredLanguageKo, PreferredLanguagePt:
		return true
	}
	return false
}

func (e PreferredLanguage) String() string {
	return string(e)
}

func (e *PreferredLanguage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PreferredLanguage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PreferredLanguage", str)
	}
	return nil
}

func (e PreferredLanguage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PreferredWeightUnit string

const (
	PreferredWeightUnitPounds    PreferredWeightUnit = "POUNDS"
	PreferredWeightUnitKilograms PreferredWeightUnit = "KILOGRAMS"
)

var AllPreferredWeightUnit = []PreferredWeightUnit{
	PreferredWeightUnitPounds,
	PreferredWeightUnitKilograms,
}

func (e PreferredWeightUnit) IsValid() bool {
	switch e {
	case PreferredWeightUnitPounds, PreferredWeightUnitKilograms:
		return true
	}
	return false
}

func (e PreferredWeightUnit) String() string {
	return string(e)
}

func (e *PreferredWeightUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PreferredWeightUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PreferredWeightUnit", str)
	}
	return nil
}

func (e PreferredWeightUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
