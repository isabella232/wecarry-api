// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateMessageInput struct {
	Content  string  `json:"content"`
	PostID   string  `json:"postID"`
	ThreadID *string `json:"threadID"`
}

type CreateOrganizationDomainInput struct {
	Domain         string `json:"domain"`
	OrganizationID string `json:"organizationID"`
}

type CreateOrganizationInput struct {
	Name       string  `json:"name"`
	URL        *string `json:"url"`
	AuthType   string  `json:"authType"`
	AuthConfig string  `json:"authConfig"`
}

type LocationInput struct {
	Description string   `json:"description"`
	Country     string   `json:"country"`
	Latitude    *float64 `json:"latitude"`
	Longitude   *float64 `json:"longitude"`
}

type RemoveOrganizationDomainInput struct {
	Domain         string `json:"domain"`
	OrganizationID string `json:"organizationID"`
}

type SetThreadLastViewedAtInput struct {
	ThreadID string    `json:"threadID"`
	Time     time.Time `json:"time"`
}

type UpdateOrganizationInput struct {
	ID         string  `json:"id"`
	Name       string  `json:"name"`
	URL        *string `json:"url"`
	AuthType   string  `json:"authType"`
	AuthConfig string  `json:"authConfig"`
}

type UpdatePostStatusInput struct {
	ID     string     `json:"id"`
	Status PostStatus `json:"status"`
}

type UpdateUserInput struct {
	ID       *string        `json:"id"`
	PhotoID  *string        `json:"photoID"`
	Location *LocationInput `json:"location"`
}

type PostRole string

const (
	PostRoleCreatedby PostRole = "CREATEDBY"
	PostRoleReceiving PostRole = "RECEIVING"
	PostRoleProviding PostRole = "PROVIDING"
)

var AllPostRole = []PostRole{
	PostRoleCreatedby,
	PostRoleReceiving,
	PostRoleProviding,
}

func (e PostRole) IsValid() bool {
	switch e {
	case PostRoleCreatedby, PostRoleReceiving, PostRoleProviding:
		return true
	}
	return false
}

func (e PostRole) String() string {
	return string(e)
}

func (e *PostRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostRole", str)
	}
	return nil
}

func (e PostRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostSize string

const (
	PostSizeTiny   PostSize = "TINY"
	PostSizeSmall  PostSize = "SMALL"
	PostSizeMedium PostSize = "MEDIUM"
	PostSizeLarge  PostSize = "LARGE"
	PostSizeXlarge PostSize = "XLARGE"
)

var AllPostSize = []PostSize{
	PostSizeTiny,
	PostSizeSmall,
	PostSizeMedium,
	PostSizeLarge,
	PostSizeXlarge,
}

func (e PostSize) IsValid() bool {
	switch e {
	case PostSizeTiny, PostSizeSmall, PostSizeMedium, PostSizeLarge, PostSizeXlarge:
		return true
	}
	return false
}

func (e PostSize) String() string {
	return string(e)
}

func (e *PostSize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostSize", str)
	}
	return nil
}

func (e PostSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostStatus string

const (
	PostStatusOpen      PostStatus = "OPEN"
	PostStatusCommitted PostStatus = "COMMITTED"
	PostStatusAccepted  PostStatus = "ACCEPTED"
	PostStatusDelivered PostStatus = "DELIVERED"
	PostStatusReceived  PostStatus = "RECEIVED"
	PostStatusCompleted PostStatus = "COMPLETED"
	PostStatusRemoved   PostStatus = "REMOVED"
)

var AllPostStatus = []PostStatus{
	PostStatusOpen,
	PostStatusCommitted,
	PostStatusAccepted,
	PostStatusDelivered,
	PostStatusReceived,
	PostStatusCompleted,
	PostStatusRemoved,
}

func (e PostStatus) IsValid() bool {
	switch e {
	case PostStatusOpen, PostStatusCommitted, PostStatusAccepted, PostStatusDelivered, PostStatusReceived, PostStatusCompleted, PostStatusRemoved:
		return true
	}
	return false
}

func (e PostStatus) String() string {
	return string(e)
}

func (e *PostStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostStatus", str)
	}
	return nil
}

func (e PostStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
