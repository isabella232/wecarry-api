package actions

import (
	"handcarry/models"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (UserOrganization)
// DB Table: Plural (user_organizations)
// Resource: Plural (UserOrganizations)
// Path: Plural (/user_organizations)
// View Template Folder: Plural (/templates/user_organizations/)

// UserOrganizationsResource is the resource for the UserOrganization model
type UserOrganizationsResource struct {
	buffalo.Resource
}

// List gets all UserOrganizations. This function is mapped to the path
// GET /user_organizations
func (v UserOrganizationsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	userOrganizations := &models.UserOrganizations{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all UserOrganizations from the DB
	if err := q.All(userOrganizations); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, userOrganizations))
}

// Show gets the data for one UserOrganization. This function is mapped to
// the path GET /user_organizations/{user_organization_id}
func (v UserOrganizationsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty UserOrganization
	userOrganization := &models.UserOrganization{}

	// To find the UserOrganization the parameter user_organization_id is used.
	if err := tx.Find(userOrganization, c.Param("user_organization_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, userOrganization))
}

// Create adds a UserOrganization to the DB. This function is mapped to the
// path POST /user_organizations
func (v UserOrganizationsResource) Create(c buffalo.Context) error {
	// Allocate an empty UserOrganization
	userOrganization := &models.UserOrganization{}

	// Bind userOrganization to the html form elements
	if err := c.Bind(userOrganization); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(userOrganization)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, userOrganization))
	}

	// and redirect to the user_organizations index page
	return c.Render(201, r.Auto(c, userOrganization))
}

// Update changes a UserOrganization in the DB. This function is mapped to
// the path PUT /user_organizations/{user_organization_id}
func (v UserOrganizationsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty UserOrganization
	userOrganization := &models.UserOrganization{}

	if err := tx.Find(userOrganization, c.Param("user_organization_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind UserOrganization to the html form elements
	if err := c.Bind(userOrganization); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(userOrganization)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, userOrganization))
	}

	// and redirect to the user_organizations index page
	return c.Render(200, r.Auto(c, userOrganization))
}

// Destroy deletes a UserOrganization from the DB. This function is mapped
// to the path DELETE /user_organizations/{user_organization_id}
func (v UserOrganizationsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty UserOrganization
	userOrganization := &models.UserOrganization{}

	// To find the UserOrganization the parameter user_organization_id is used.
	if err := tx.Find(userOrganization, c.Param("user_organization_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(userOrganization); err != nil {
		return errors.WithStack(err)
	}

	// Redirect to the user_organizations index page
	return c.Render(200, r.Auto(c, userOrganization))
}
